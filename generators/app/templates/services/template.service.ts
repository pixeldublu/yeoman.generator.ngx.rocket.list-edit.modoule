/**
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */


import { Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';

import { Observable } from 'rxjs';

import { <%= mainModel %>  } from '../models/<%= secondaryModel %>.model';

import { Configuration } from '@core/configuration';

@Injectable()
export class <%= mainTitle %>Service {
  protected basePath = '';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() configuration: Configuration
  ) {

    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * List all <%= secondaryTitle %>.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public api<%= mainTitle %>Get(observe?: 'body', reportProgress?: boolean): Observable<<%= mainModel %>[]>;
  public api<%= mainTitle %>Get(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<<%= mainModel %>>>;
  public api<%= mainTitle %>Get(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<<%= mainModel %>>>;
  public api<%= mainTitle %>Get(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<<%= mainModel %>>(`/<%= secondaryTitle %>/`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Delete client
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public api<%= mainTitle %>IdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public api<%= mainTitle %>IdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public api<%= mainTitle %>IdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public api<%= mainTitle %>IdDelete(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling api<%= mainTitle %>IdDelete.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<any>(`/<%= secondaryTitle %>/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Get one client by id
   *
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public api<%= mainTitle %>IdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<<%= mainModel %>>;
  public api<%= mainTitle %>IdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<<%= mainModel %>>>;
  public api<%= mainTitle %>IdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<<%= mainModel %>>>;
  public api<%= mainTitle %>IdGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling api<%= mainTitle %>IdGet.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<<%= mainModel %>>(`/<%= secondaryTitle %>/${encodeURIComponent(String(id))}`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Upate client
   *
   * @param id
   * @param client
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public api<%= mainTitle %>IdPost(id: string, client?: <%= mainModel %>, observe?: 'body', reportProgress?: boolean): Observable<<%= mainModel %>>;
  public api<%= mainTitle %>IdPost(
    id: string,
    client?: <%= mainModel %>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<<%= mainModel %>>>;
  public api<%= mainTitle %>IdPost(
    id: string,
    client?: <%= mainModel %>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<<%= mainModel %>>>;
  public api<%= mainTitle %>IdPost(
    id: string,
    client?: <%= mainModel %>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling api<%= mainTitle %>IdPost.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<<%= mainModel %>>(`/<%= secondaryTitle %>/${encodeURIComponent(String(id))}`, client, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }

  /**
   * Create new client
   *
   * @param client
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public api<%= mainTitle %>Post(client?: <%= mainModel %>, observe?: 'body', reportProgress?: boolean): Observable<<%= mainModel %>>;
  public api<%= mainTitle %>Post(
    client?: <%= mainModel %>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<<%= mainModel %>>>;
  public api<%= mainTitle %>Post(client?: <%= mainModel %>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<<%= mainModel %>>>;
  public api<%= mainTitle %>Post(client?: <%= mainModel %>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<<%= mainModel %>>(`/<%= secondaryTitle %>/`, client, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  }
}
